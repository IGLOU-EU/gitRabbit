#!/bin/bash
# Copyright 2018 Iglou.eu
# Copyright 2018 Adrien Kara
# license that can be found in the LICENSE file.
# SIG TRAP
trap "quit" 2 3

# TMPCONF
USER="adrien"
WORK_DIR="/tmp/gitRabbit"

# FUNCTIONS
function err() {
    echo "FATAL ERROR: ${1}"
    exit 1
}

function quit()
{
    log -1 "Program Termination"
    exit 0
}

function log()
{
    local _buff=""
    local _logTarg=""

    if [ $tinyLog -ne 0 ] && [ $1 -eq 0 ]; then return 0; fi
    if [ $tinyLog -eq 2 ] && [ $1 -eq -1 ]; then return 0; fi

    if [ $1 -eq 1 ]; then _buff="ERROR"
    else _buff="INFO "; fi

    _buff="[${_buff}] $(date '+%H%M%S-%d%m%y'): ${2}"

    if ! $quietMode; then echo "${_buff}"; fi
    echo "${_buff}" >> "${logFile}"

    return $1
}

function help()
{
    echo "usage : gitRabbit [-q] [-c <path>] [-u <user>] [-w <path>]
                  [-l <path>] [-s <time>] [-t|-tt]

    -q        Show information only from fatal error operations

    -c        Specify an alternate configuration file

    -u        Specify user for more secure operations
              This should be a dedicated system account
              Incorrect entry cause not start

    -w        Path for storing all data,
              it must be an absolute path

    -l        Specify an alternate log file

    -s        Time before re-check all repository

    -t, -tt   Print less information in log
              Specify this option twice(-tt) to only print error
    "
}

function parsing_args()
{
    while [ $# -ne 0 ]; do
        case "$1" in
            "-q")
                quietMode="true"
                ;;
            "-c")
                shift
                forceConf="$1"
                ;;
            "-u")
                shift
                forceUser="$1"
                ;;
            "-w")
                shift
                workDir="$1"
                ;;
            "-l")
                shift
                forceLog="$1"
                ;;
            "-s")
                shift
                sleepTime="$1"
                ;;
            "-t")
                tinyLog=1
                ;;
            "-tt")
                tinyLog=2
                ;;
            *)
                echo "Unknown option -- $1"
                help
                exit 1
                ;;
        esac

        shift
    done
}

function init_dir()
{
    eval $1="${!1%%/}"
    local _dir=${!1}
    local _buff="${_dir%/*}"

    if [[ -e $_dir ]]; then
        if [[ -w $_dir ]]; then return 0
        else err "Unable to write to '${_dir}'"; fi
    fi

    if [[ -w $_buff ]]; then
        mkdir -p "$_dir"
        return 0
    else
        err "Unable to write '${_dir#*/}' in '${_buff:-/}'"
    fi
}

function init_log()
{
    logFile="${logDir}${logFile}"
    if [[ ! -r $logFile ]]; then touch "$logFile"; fi

    echo ""                                  >> "${logFile}"
    echo "########## gitRabbit ##########"   >> "${logFile}"
    echo "Started at : '$(date)'"            >> "${logFile}"
    echo "Working dir: '${workDir}'"         >> "${logFile}"
    echo "Config file: '${confFile}'"        >> "${logFile}"
    echo "Log file   : '${logFile}'"         >> "${logFile}"
    echo "---"                               >> "${logFile}"

    if ! $quietMode; then cat "${logFile}"; fi
}

function init_gitRabbit()
{
    if [[ -z $forceLog ]]; then logDir="${workDir}${logDir}"
    else logDir="${forceLog}"; forceLog=""; fi

    if [[ -z $forceConf ]]; then confFile="${workDir}${confFile}"
    else confFile="${forceConf}"; forceConf=""; fi

    init_dir "workDir"
    init_dir "logDir"

    init_log
    init_conf

    if [[ ! -z $forceUser ]] && [[ $forceUser != $USER ]]; then
        err "Expect user '${forceUser}' but current user is: '${USER}'"
    fi

    init_lapereaux
}

function init_conf()
{
    if [[ ! -r $confFile ]]; then
        if [[ -w ${confFile%/*} ]]; then touch "$confFile"
        else err "Unable to write conf file '${confFile}'"; fi
    fi

    . "$confFile"
    if [ $? -eq 0 ]; then log 0 "Config file sourced '${confFile}'"
    else err "Fail to source '${confFile}'"; fi

    if [[ -z $lapereaux ]]; then err "No lapereaux defined in '${confFile}'"; fi
}

function init_lapereaux()
{
    local _var=""
    local _buff=""
    local _status=false
    local _lapDir=""
    local _checked=()

    for lapinou in ${lapereaux[@]}
    do
        _lapDir="${workDir}/${lapinou}"

        _var="${lapinou}_remove"
        if ${!_var:-false}; then
            _buff="$(rm -rf ${_lapDir} 2>&1)"
            if [ $? -eq 0 ]; then log -1 "Repository '${lapinou}' removed"
            else log 1 "Can't remove '${lapinou}'"; log 1 "${_buff}"; fi
            continue
        fi

        if [[ -w $_lapDir ]]; then
            cd "${_lapDir}"
            _buff="$(git status 2>&1)"
            if [ $? -eq 0 ]; then _status=true; fi
        else
            _var="${lapinou}_branch"
            _buff="-b ${!_var:-master}"
            _var="${lapinou}_url"
            _var="${!_var:-empty_url}"
            _buff="${_buff} ${_var}"
            _buff="$(git clone --depth 1 ${_buff} ${_lapDir} 2>&1)"

            if [ $? -eq 0 ]; then
                _status=true
                log -1 "Clone '${lapinou}' repository from '${_var}'"
            fi
        fi

        if ! $_status; then
            log 1 "Can't clone or use '${lapinou}'"
            log 1 "${_buff}"
            continue
        else
            _status=false
        fi

        _checked+=("$lapinou")
    done

    _buff="${_checked[@]}"
    lapereaux=("${_checked[@]}")
    log 0 "Validates lapereaux: '${_buff}'"
}

function lapereaux_check()
{
    local _var=""
    local _buff=""
    local _lapDir=""
    local _status=false

    for lapinou in ${lapereaux[@]}
    do
        _lapDir="${workDir}/${lapinou}"
        cd "${_lapDir}"

        _buff="$(git fetch origin 2>&1)"
        if [ $? -ne 0 ]; then
            log 1 "Repository '${lapinou}' can't fetch"
            log 1 "${_buff}"
            continue
        fi

        # can "git log HEAD..origin/master --oneline"
        _buff="$(git checkout | grep "git pull" 2>&1)"
        if [[ $_buff = "" ]]; then
            log 0 "Repository '${lapinou}' nothing to do"
            continue
        fi

        _var="${lapinou}_before"
        if [[ ! -z ${!_var} ]]; then eval ${!_var}; fi

        _var="${lapinou}_branch"
        _var="${!_var:-master}"
        _buff="$(git reset --hard origin/${_var} 2>&1)"
        if [ $? -eq 0 ]; then _status="true"; fi
        git clean -fd # Don't forget to add datas files to git ignore ...

        _var="${lapinou}_after"
        if [[ ! -z ${!_var} ]]; then eval ${!_var}; fi

        if $_status; then
            log 0 "Repository '${lapinou}' updated"
        else
            log 1 "Fail to update '${lapinou}' repository"
            log 1 "${_buff}"
        fi
    done
}

function working_loop()
{
    while :
    do
        lapereaux_check
        log 0 "End of a lapereaux turn"

        sleep $sleepTime
    done
}

# VARS
logDir="/log"
workDir="${WORK_DIR:-/tmp}"
logFile="/gitRabbit.log"
confFile="/lapereaux.conf"

tinyLog=0
forceUser=""
sleepTime="60"
quietMode="false"
lapereaux=()

# MAIN
parsing_args $@
init_gitRabbit
working_loop
quit
